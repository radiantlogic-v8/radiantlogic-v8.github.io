{"version":3,"file":"component---src-templates-javadoc-page-js-9e4dd50d4e6f155fa8ac.js","mappings":"+KAiEA,IA7DyBA,KACvB,MAAMC,GAAQC,EAAAA,EAAAA,YAAWC,EAAAA,IAiCnBC,EAA2BC,IAAS,IAADC,EAGvC,OAFa,KAAOL,SAAsB,QAAjBK,EAALL,EAAOM,uBAAe,IAAAD,OAAjB,EAALA,EAAwBE,eAAa,IAAIH,GAE9CI,QAAQ,OAAQ,IAAI,EAerC,MAAO,CACLC,mBAHyBT,EAAMM,gBAI/BI,YAHkBV,EAAMW,SAIxBC,yBA9C+BC,UAAqB,IAADC,EACnD,MAAMC,EAA4Bf,EAAMM,gBAAgBC,cAIlDS,GAFgC,QAApBF,EAAGG,SAASC,gBAAQ,IAAAJ,EAAAA,EAAI,IAEKN,QAC7C,IAAIW,OAAO,MAAQJ,EAA4B,SAC/C,IAGIK,EAAQ,IAAOC,EAAWd,cAAgBS,EAG5ChB,EAAMsB,UAAUC,SAASH,SACrBI,EAAAA,EAAAA,UAAS,GAAGJ,SAEZI,EAAAA,EAAAA,UAAS,IAAIH,EAAWd,cAChC,EA8BAJ,2BACAsB,6BAXmCZ,eAAOa,EAAIC,QAAO,IAAPA,IAAAA,OAAUC,SAClDJ,EAAAA,EAAAA,UAASrB,EAAyBuB,GAAKC,EAC/C,EAUC,C,2FCLH,UAlDoBE,IAAyB,IAAxB,KAAEC,EAAI,SAAEb,GAAUY,EACrC,MAAM,mBAAEpB,IAAuBV,EAAAA,EAAAA,KACzBgC,EAAYD,EAAKE,eAAeC,MAAM,GAAGC,KAAKC,QACjDC,WAAW,aAAc,KACzBA,WAAW,QAAS,IACpBA,WACC,kBAAkB,WAEsB,MAAtC3B,aAAkB,EAAlBA,EAAoBF,eAChB,IACAE,aAAkB,EAAlBA,EAAoBF,eAAgB,KAAG,YAG3C8B,GAAWpC,EAAAA,EAAAA,YAAWqC,EAAAA,IAU5B,OARAC,EAAAA,EAAAA,YAAU,KACRF,EAAS,CAAEG,KAAM,8BAA+BC,QAASxB,IACzDoB,EAAS,CACPG,KAAM,0BACNC,QAAS,CAAExB,SAAUA,IACrB,GACD,CAACA,IAGFyB,EAAAA,cAACC,EAAAA,EAAM,CAACC,YAAad,EAAKe,SACxBH,EAAAA,cAACI,EAAAA,GAAG,CAACC,EAAE,OAAOC,wBAAyB,CAAEC,OAAQlB,KAC1C,C,yFC3BTe,GAAM,OAAO,OACjBA,EAAII,YAAc,MAClB,IAAIC,GAAS,QAAW,SAAiBC,EAAOC,GAC9C,MAAM,KAAEC,EAAI,cAAEC,GAAgB,KAASC,GAASJ,EAC1CK,EAASF,EAAgB,CAAEG,QAAS,OAAQC,WAAY,SAAUC,eAAgB,UAAa,CAAC,EACtG,OAAuB,IAAAC,KACrBf,EACA,CACEO,MACAS,QAASR,EACTS,MAAO,IACFN,EACHO,WAAY,EACZC,SAAU,MAETT,GAGT,IACAL,EAAOD,YAAc,UACR,QAAW,SAAiBE,EAAOC,GAC9C,MAAM,KAAEC,KAASE,GAASJ,EAC1B,OAAuB,IAAAS,KAAIV,EAAQ,CAAEG,OAAMD,MAAKa,aAAc,YAAaV,GAC7E,IACON,YAAc,Q,uFCxBjBiB,GAAO,QAAW,SAAef,EAAOC,GAC1C,MAAM,UAAEe,EAAS,MAAEC,EAAK,QAAEC,EAAO,KAAEC,EAAI,MAAEC,EAAK,KAAEC,EAAI,OAAEC,KAAWlB,GAASJ,EACpEK,EAAS,CACbC,QAAS,OACTiB,cAAeP,EACfT,WAAYU,EACZT,eAAgBU,EAChBM,SAAUL,EACVM,UAAWL,EACXP,SAAUQ,EACVT,WAAYU,GAEd,OAAuB,IAAAb,KAAI,IAAOiB,IAAK,CAAEzB,MAAKU,MAAON,KAAWD,GAClE,IACAW,EAAKjB,YAAc,M","sources":["webpack://radiant-logic-documentation/./src/hooks/useApiVersioning.js","webpack://radiant-logic-documentation/./src/templates/javadoc-page.js","webpack://radiant-logic-documentation/./node_modules/@chakra-ui/layout/dist/chunk-6CSUKJP7.mjs","webpack://radiant-logic-documentation/./node_modules/@chakra-ui/layout/dist/chunk-MPFPK3CX.mjs"],"sourcesContent":["import { useContext } from \"react\"\nimport { navigate } from \"gatsby\"\nimport { GlobalStateContext } from \"../context/globalContextProvider\"\n\nconst useApiVersioning = () => {\n  const state = useContext(GlobalStateContext)\n\n  /**\n   * switches between versions of the api\n   * If it finds a page corresponding to the current one in the new version, it navigates to it, otherwise it navigates to the homepage of the new version\n   * @param newVersion\n   * @returns {Promise<void>}\n   */\n  const changeSelectedApiVersion = async newVersion => {\n    const currentVersionRoutePrefix = state.selectedVersion.versionPrefix\n\n    const currentRoute = location.pathname ?? \"\"\n\n    const routeWithoutVersionPrefix = currentRoute.replace(\n      new RegExp(\"/^(\" + currentVersionRoutePrefix + \"\\\\.)/\"),\n      \"\"\n    )\n\n    const newRoute = `/${newVersion.versionPrefix}${routeWithoutVersionPrefix}`\n\n    //if there is a route to the same page on the selected version, navigate to it, else go to a fallback route on the new version\n    if (state.sitePages.includes(newRoute)) {\n      await navigate(`${newRoute}`)\n    } else {\n      await navigate(`/${newVersion.versionPrefix}`)\n    }\n  }\n\n  /**\n   * appends to the path passed as parameter the prefix for the current version and returns it\n   * @param path\n   * @returns {*|string}\n   */\n  const getPathWithVersionPrefix = path => {\n    const newPath = `/${state?.selectedVersion?.versionPrefix}/${path}`\n\n    return newPath.replace(/\\/+/g, \"/\")\n  }\n\n  /**\n   * navigates to the path passed as parameter, but within the currently selected version\n   * @param to\n   * @param options\n   * @returns {Promise<void>}\n   */\n  const navigateWithinCurrentVersion = async (to, options = undefined) => {\n    await navigate(getPathWithVersionPrefix(to), options)\n  }\n\n  const selectedApiVersion = state.selectedVersion\n  const apiVersions = state.versions\n  return {\n    selectedApiVersion,\n    apiVersions,\n    changeSelectedApiVersion,\n    getPathWithVersionPrefix,\n    navigateWithinCurrentVersion,\n  }\n}\n\nexport default useApiVersioning\n","import React, { useContext, useEffect } from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport \"../styles/javadoc.css\"\nimport { Box } from \"@chakra-ui/react\"\nimport { GlobalDispatchContext } from \"../context/globalContextProvider\"\nimport useApiVersioning from \"../hooks/useApiVersioning\"\nconst JavadocPage = ({ data, location }) => {\n  const { selectedApiVersion } = useApiVersioning()\n  const generated = data.allHtmlContent.edges[0].node.content\n    .replaceAll(/(\\.\\.\\/)+/g, \"/\")\n    .replaceAll(\".html\", \"\")\n    .replaceAll(\n      /href=\"\\/?(?!#)/g,\n      `href=\"/${\n        selectedApiVersion?.versionPrefix === \"\"\n          ? \"\"\n          : selectedApiVersion?.versionPrefix + \"/\"\n      }javadoc/`\n    )\n  const dispatch = useContext(GlobalDispatchContext)\n\n  useEffect(() => {\n    dispatch({ type: \"UPDATE_SELECTED_API_VERSION\", payload: location })\n    dispatch({\n      type: \"UPDATE_CURRENT_LOCATION\",\n      payload: { location: location },\n    })\n  }, [location])\n\n  return (\n    <Layout tocContents={data.rootToc}>\n      <Box w=\"100%\" dangerouslySetInnerHTML={{ __html: generated }} />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query ($name: String!, $rootTocRegex: String!) {\n    allHtmlContent(filter: { name: { eq: $name } }) {\n      edges {\n        node {\n          name\n          content\n        }\n      }\n    }\n    rootToc: markdownRemark(fileAbsolutePath: { regex: $rootTocRegex }) {\n      fileAbsolutePath\n      frontmatter {\n        title\n      }\n      htmlAst\n    }\n  }\n`\n\nexport default JavadocPage\n","// src/box.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Box = chakra(\"div\");\nBox.displayName = \"Box\";\nvar Square = forwardRef(function Square2(props, ref) {\n  const { size, centerContent = true, ...rest } = props;\n  const styles = centerContent ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" } : {};\n  return /* @__PURE__ */ jsx(\n    Box,\n    {\n      ref,\n      boxSize: size,\n      __css: {\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0\n      },\n      ...rest\n    }\n  );\n});\nSquare.displayName = \"Square\";\nvar Circle = forwardRef(function Circle2(props, ref) {\n  const { size, ...rest } = props;\n  return /* @__PURE__ */ jsx(Square, { size, ref, borderRadius: \"9999px\", ...rest });\n});\nCircle.displayName = \"Circle\";\n\nexport {\n  Box,\n  Square,\n  Circle\n};\n","// src/flex.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Flex = forwardRef(function Flex2(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } = props;\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink\n  };\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nFlex.displayName = \"Flex\";\n\nexport {\n  Flex\n};\n"],"names":["useApiVersioning","state","useContext","GlobalStateContext","getPathWithVersionPrefix","path","_state$selectedVersio","selectedVersion","versionPrefix","replace","selectedApiVersion","apiVersions","versions","changeSelectedApiVersion","async","_location$pathname","currentVersionRoutePrefix","routeWithoutVersionPrefix","location","pathname","RegExp","newRoute","newVersion","sitePages","includes","navigate","navigateWithinCurrentVersion","to","options","undefined","_ref","data","generated","allHtmlContent","edges","node","content","replaceAll","dispatch","GlobalDispatchContext","useEffect","type","payload","React","Layout","tocContents","rootToc","Box","w","dangerouslySetInnerHTML","__html","displayName","Square","props","ref","size","centerContent","rest","styles","display","alignItems","justifyContent","jsx","boxSize","__css","flexShrink","flexGrow","borderRadius","Flex","direction","align","justify","wrap","basis","grow","shrink","flexDirection","flexWrap","flexBasis","div"],"sourceRoot":""}